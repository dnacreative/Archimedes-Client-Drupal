<?php

/**
* Implementation of hook_menu().
*/
function archimedes_menu() {
  $items = array();
  $items[] = array(
    'path' => 'admin/logs/archimedes',
    'title' => t('Archimedes'),
    'access' => user_access('access administration pages'),
    'callback' => 'archimedes_out',
    'description' => t('Administer Archimedes'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items[] = array(
    'path' => 'admin/logs/archimedes/update',
    'title' => t('Archimedes'),
    'access' => user_access('access administration pages'),
    'callback' => 'archimedes_send_force',
    'type' => MENU_CALLBACK,
  );
  $items[] = array(
    'path' => 'admin/logs/archimedes/data',
    'title' => t('Data'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[] = array(
    'path' =>'admin/logs/archimedes/settings',
    'title' => t('Settings'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'archimedes_admin',
    'access' => user_access('access administration pages'),
    'type' => MENU_LOCAL_TASK,
   );
   $items[] = array(
    'path' => 'admin/logs/archimedes/export',
    'title' => t('XML Export'),
    'callback' => 'archimedes_export',
    'access' => user_access('access administration pages'),
    'type' => MENU_LOCAL_TASK,
   );
   $items['archimedes/login'] = array(
    'page callback' => 'archimedes_request_admin_access',
    'type' => MENU_CALLBACK,
    // Access to callback is very open.
    'access arguments' => array('string'),
    'access callback' => 'is_string',
   );
  return $items;
} // archimedes_menu()


function archimedes_out() {
  include_once dirname(__FILE__) . "/archimedes.class.php";
  $owl = archimedes_collect();
  $header = array('Component', 'Value');
  $rows = array(
    array('Site title',(string) $owl->getField('title')),
    array('Description',(string) $owl->getField('body')),
    array('Servername',(string) $owl->getField('field_servername')),
    array('Web Server',(string) $owl->getField('field_webserver')),
    array('Web Root',(string) $owl->getField('field_webroot')),
    array('DB Host',(string) $owl->getField('field_dbhost')),
    array('DB Name',(string) $owl->getField('field_dbname')),
    array('Users',(string) $owl->getField('field_users')),
    array('DB Size',(string) $owl->getField('field_db_size')),
    array('Site Data Size',(string) $owl->getField('field_sitedata')),
    array('Webroot Size',(string) $owl->getField('field_sitesize')),
    array('User Count',(string) $owl->getField('field_num_users')),
    array('Node Count',(string) $owl->getField('field_drupal_nodes')),
  );

  // Allow other modules to add data via hook_archimedes_data.
  foreach (module_implements('archimedes_rows') as $module) {
    $rows = module_invoke($module,'archimedes_rows', $rows, $owl);
  }
  $table = theme('table', $header, $rows);

  $header = array('Modules','Version','Description');
  $modules = theme('table',$header,$owl->getField('field_drupal_mod')->toArray());

  $header = array('Themes','Version','Description');
  $themes = theme('table',$header,$owl->getField('field_drupal_theme')->toArray());

  $output = '<p>This page shows the current output from of Archimedes Client for this website. It will not necessarily match what is known by the server.</p>';
  $output .= '<p>' . l('Force server update','admin/logs/archimedes/update') . ' | ' . l('View data on server', variable_get('archimedes_server_location','')) . '</p>';
  return $output . $table . $modules . $themes;
} // archimedes_out()


function archimedes_export() {
  include_once dirname(__FILE__) . "/archimedes.class.php";
  $owl = archimedes_collect();

  return '<pre>' . htmlentities($owl->toXML()) . '</pre>';

} // archimedes_export()

/**
  * @param $server_name The name of the server.
  * @param $protocol The protocol being used (either http or https).
  */
function archimedes_collect() {

  global $db_url, $db_type, $base_url;

  // find root loacation
  $root = substr(dirname(__FILE__), 0, strpos(dirname(__FILE__), drupal_get_path('module', 'archimedes')));

  // Produce a unique value to represent this instance of Drupal.
  $keys = module_invoke_all('archimedes_id');
  sort($keys);
  $owl = new Archimedes('drupal', variable_get('site_mail', FALSE), md5(implode('', $keys)));

  $owl->createField('title', variable_get('site_name', "unknown"));
  $owl->createField('field_drupal_version', VERSION);

  if (variable_get('archimedes_description', '') != '') {
    $path = explode('/',drupal_get_normal_path(variable_get('archimedes_description', 'node')));
    $node = node_load($path[1]);
    $body = trim(substr(strip_tags($node->body,'<p><b><a>'),0,500));
    $owl->createField('body', $body);
  } else {
    $owl->createField('body', variable_get('site_mission', 'No description has been set.'));
  }

  $owl->createField('field_servername', $base_url);

  $hostname = archimedes_shell_exec("hostname -f");
  $values = array();
  $values[] = archimedes_value($hostname,'nodereference')->addNode(array('title' => $hostname, 'type' => 'host'));
  $owl->createField('field_webserver', $values)
      ->invokeFacet();
  $owl->createField('field_webroot', 'file://' . $root);

  $urls = array();
  if (!is_array($db_url)) {
    $urls[] = $db_url;
  } else {
    $urls = $db_url;
  }
  $values = array();
  foreach($urls as $url) {
    $db = parse_url($url);
    $dbName = substr($db['path'],1);
    $dbhost = ($db['host'] == 'localhost' || $db['host'] == '127.0.0.1') ? $hostname : $db['host'];
    $values[] = archimedes_value($dbhost,'nodereference')->addNode(array('title' => $dbhost, 'type' => 'host'));
  }

  $owl->createField('field_dbhost', $values)
      ->invokeFacet();
  $owl->createField('field_dbname', $dbName);

  $user = array(
    'type' => 'mail',
    'mailto' => 'mailto:' . db_result(db_query("SELECT u.mail FROM {users} u WHERE uid = 1 LIMIT 1")),
  );
  $value = archimedes_value($user['mailto'],'userreference')
            ->addUser($user);
  $owl->createField('field_users', array($value))
      ->invokeFacet();

  switch ($db_type) {
    case 'pgsql':
      $owl->createField('field_db_size', db_result(db_query("SELECT pg_database_size('" . $dbName . "')")));
      break;
    case 'mysql':
    case 'mysqli':
      $rs = db_query("SHOW TABLE STATUS");
      $size = 0;
      while ($row = db_fetch_object($rs)) {
        $size += ($row->Data_length + $row->Index_length);
      }
      $owl->createField('field_db_size', $size);
    break;
  }

  $dataSize = preg_split('/[\s]+/',archimedes_shell_exec("du -bsL " . $root . base_path() . file_directory_path()));
  $owl->createField('field_sitedata', $dataSize[0]);

  $rootSize = preg_split('/[\s]+/',archimedes_shell_exec("du -bsL " . $root . base_path()));
  $owl->createField('field_sitesize', $rootSize[0] - $dataSize[0]);

  $owl->createField('field_num_users', db_result(db_query("SELECT COUNT(uid) FROM {users}"))-1); // subtract one for public user

  $owl->createField('field_drupal_nodes', db_result(db_query("SELECT COUNT(nid) FROM {node}")));

  $modules = $themes = array();
  foreach (module_list() as $module) {
    $info = _module_parse_info_file(drupal_get_path('module', $module) . '/' . $module . '.info');
    $node = array(
      'title'   => $info['name'],
      'body'    => $info['description'],
      'field_name' => $module,
      'field_dru_pkg' => $info['package'],
      'field_dru_proj' => $info['project'],
      'field_mod_version' => $info['version'],
      'field_mod_url' => $info['project status url'],
      'type'    => 'drupal_module',
    );
    if (!isset($node['field_dru_proj']) && isset($node['field_dru_pkg']) && (strpos($node['field_dru_pkg'], 'Core -') !== FALSE)) {
      $node['field_dru_proj'] = 'drupal';
    }
    $value = archimedes_value($node['title'], 'drupalmod')
              ->addNode($node);
    $modules[] = $value;
  }
  $owl->createField('field_drupal_mod', $modules)
      ->invokeFacet();

  $result = db_query("SELECT * FROM {system} WHERE status = 1 AND type = 'theme'");
  while ($theme = db_fetch_array($result)) {
    $node = array(
      'title' => $theme['name'],
      'body'  => $theme['description'],
      'field_name' => $theme['name'],
      'field_dru_proj' => $info['project'],
      'field_mod_url' => $info['project status url'],
      'field_mod_version' => '5.x',
      'type'  => 'drupal_theme',
    );
    if (!isset($node['field_dru_proj']) && in_array($theme['name'], array('bluemarine', 'chameleon', 'garland', 'marvin', 'minnelli', 'pushbutton'))) {
      // Unfortunately, there's no way to tell if a theme is part of core,
      // so we must hard-code a list here.
      $node['field_dru_proj'] = 'drupal';
    }
    $value = archimedes_value($theme['name'], 'drupalmod')
              ->addNode($node);

    $themes[] = $value;
  }
  $owl->createField('field_drupal_theme', $themes)
      ->invokeFacet();

  // Allow other modules to add data via hook_archimedes_data.
  foreach (module_implements('archimedes_data') as $module) {
    $owl = module_invoke($module,'archimedes_data', $owl);
  }

  return $owl;
} // archimedes_collect()

/**
 * Implementation of hook_archimedes_id().
 */
function archimedes_archimedes_id() {
  global $db_url, $base_url;
  $url = (is_array($db_url) ? implode('', $db_url) : $db_url);
  $urls = parse_url($base_url);
  return $urls['host'] . $url;
}


function archimedes_admin() {
  $form = array();

  $form['archimedes_server_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Server email address'),
    '#default_value' => variable_get('archimedes_server_email', 'archimedes@server.com'),
    '#description' => t('Set Archimedes server email address.'),
  );

  $form['archimedes_server_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Server web address'),
    '#default_value' => variable_get('archimedes_server_location', 'http://server.com'),
    '#description' => t('Set Archimedes server web address.'),
  );

  $form['archimedes_server_key'] = array(
    '#type' => 'textarea',
    '#title' => t('Server Public Key'),
    '#default_value' => variable_get('archimedes_server_key', ''),
    '#description' => t('Set the public key for the Archimedes server. This can be found on the Archimedes server administration pages. If left blank mail will be unencrypted.'),
  );

  $form['archimedes_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description node'),
    '#size' => 40,
    '#default_value' => variable_get('archimedes_description', ''),
    '#field_prefix' => url(NULL, NULL, NULL, TRUE) . (variable_get('clean_url', 0) ? '' : '?q='),
    '#description' => t('Set the path where Archimedes can find a description for the site. If left blank, the Site Mission is used.'),
  );

  $form['archimedes_cron_update'] = array(
    '#type' => 'textfield',
    '#title' => t('Cron upate every x days'),
    '#size' => 5,
    '#default_value' => variable_get('archimedes_cron_update', 1),
    '#description' => t('Set Archimedes minimum cron update period.'),
  );

  return system_settings_form($form);
}

/**
  * Send a report to the Archimedes server via email.
  *
  * Doesn't use Drupal's messaging system because the communication
  * with the server is independant of Drupal.
  *
  * @param $server_name name of the server
  * @param $protocol protocol being used (either http or https)
  */
function archimedes_send() {
  include_once dirname(__FILE__) . "/archimedes.class.php";
  $server_email = variable_get('archimedes_server_email','');
  $server_key = variable_get('archimedes_server_key','');
  $site_name  = variable_get('site_name', 'unknown');

  $owl = archimedes_collect();
  if ($server_email != '') {
    $site_name  = variable_get('site_name', 'unknown');
    if ($owl->sendXML('Archimedes Server <' . $server_email . '>', $site_name, $server_key))
      drupal_set_message('Update sent successfully via email to '  . $server_email . '. This many take some time to become visible on the server.');
    else
      drupal_set_message('Update failed to send for an unknown reason.','error');
  } else {
    drupal_set_message('Update failed to send as the ' . l('server email address','admin/logs/archimedes/settings') . ' is not yet set.','error');
  }
}

/**
  * Drupal UI callback to force Archimedes client to send a report.
  */
function archimedes_send_force() {
  archimedes_send();
  drupal_goto('admin/logs/archimedes');
}

/**
  * Implementation of hook_cron().
  */
function archimedes_cron() {
  global $base_url;
  if($base_url != 'http://default'){
    $cron_time = variable_get('archimedes_cron_last',0);
    if (time() > $cron_time + variable_get('archimedes_cron_update',1)*86400) {
      archimedes_send();
      variable_set('archimedes_cron_last',time());
    }
  }
}

/**
 * Execute a shell command.
 *
 * Abstracted from Drush.
 */
function archimedes_shell_exec($cmd) {
  $args = func_get_args();

  //do not change the command itself, just the parameters.
  for ($x = 1; $x < sizeof($args); $x++) {
    $args[$x] = escapeshellarg($args[$x]);
  }
  $command = call_user_func_array('sprintf', $args);

  exec($command . ' 2>&1', $output, $result);

  return $output[0];
} // archimedes_shell_exec()

/**
 * Request Admin access to this Drupal site.
 *
 * If function is successfull, the user will be granted
 * user uid:1 access.
 */
function archimedes_request_admin_access() {
  global $user;
  if ($user->uid == 1) {
    drupal_goto('<front>');
  }
  $keys = module_invoke_all('archimedes_id');
  sort($keys);
  $hash = md5(implode('', $keys));

  module_load_include('php', 'archimedes', 'archimedes.class');

  if (!ArchimedesValidateRemoteRequest($hash, variable_get('archimedes_server_key',''))) {
    return drupal_access_denied();
  }

  $user = user_load(array('uid' => 1));
  drupal_set_message("Login from administration server was successful");
  drupal_goto('<front>');
}
